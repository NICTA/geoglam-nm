{
  "Outputs": {
    "URL": {
      "Value": {
        "Fn::Join": [
          ".",
          [
            {
              "Ref": "AWS::StackName"
            },
            {
              "Ref": "HostedZoneName"
            }
          ]
        ]
      }
    }
  },
  "Parameters": {
    "ElbIdleTimeout": {
      "Default": "120",
      "Type": "Number"
    },
    "HealthCheck": {
      "Default": "HTTP:80/",
      "Type": "String"
    },
    "HostedZoneName": {
      "Default": "map.geo-rapp.org.",
      "Type": "String"
    },
    "ImageId": {
      "Type": "String"
    },
    "InstanceType": {
      "Type": "String"
    },
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "Default": "rdengate",
      "Type": "String"
    },
    "MaxSize": {
      "Type": "Number"
    },
    "MinSize": {
      "Type": "Number"
    },
    "RootVolumeSize": {
      "Default": "8",
      "Type": "Number"
    },
    "SpotPrice": {
      "Default": "0",
      "Type": "Number"
    },
    "StartupGracePeriod": {
      "Default": "600",
      "Type": "Number"
    },
    "StatusNotificationTopic": {
      "Default": "arn:aws:sns:ap-southeast-2:242476885589:geoglam_service_status",
      "Type": "String"
    },
    "UserDataBase64a": {
      "Type": "String"
    },
    "UserDataBase64b": {
      "Type": "String"
    },
    "WebServerPort": {
      "Default": "8080",
      "Type": "Number"
    }
  },
  "Conditions": {
    "UseSpotInstances": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SpotPrice"
            },
            "0"
          ]
        }
      ]
    }
  },
  "Resources": {
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "HealthCheckGracePeriod": {
          "Ref": "StartupGracePeriod"
        },
        "HealthCheckType": "ELB",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ],
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "MinSize": {
          "Ref": "MinSize"
        },
        "DesiredCapacity": {
          "Ref": "MinSize"
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Stack",
            "PropagateAtLaunch": true,
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "StatusNotificationTopic"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        }
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AccessLoggingPolicy": {
          "EmitInterval": 5,
          "Enabled": true,
          "S3BucketName": "geoglam-logs",
          "S3BucketPrefix": {
            "Fn::Join": [
              "",
              [
                "stacks/",
                {
                  "Ref": "AWS::StackName"
                },
                "/elb"
              ]
            ]
          }
        },
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "HealthCheck": {
          "Target": {
            "Ref": "HealthCheck"
          },
          "HealthyThreshold": "2",
          "Interval": "30",
          "Timeout": "10",
          "UnhealthyThreshold": "5"
        },
        "ConnectionDrainingPolicy": {
          "Enabled": "true",
          "Timeout": "300"
        },
        "ConnectionSettings": {
          "IdleTimeout": {
            "Ref": "ElbIdleTimeout"
          }
        },
        "CrossZone": "true",
        "Listeners": [
          {
            "InstancePort": {
              "Ref": "WebServerPort"
            },
            "LoadBalancerPort": "80",
            "Protocol": "HTTP"
          }
        ]
      }
    },
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": {
                "Ref": "RootVolumeSize"
              },
              "VolumeType": "gp2"
            }
          },
          {
            "DeviceName": "/dev/sdb",
            "VirtualName": "ephemeral0"
          },
          {
            "DeviceName": "/dev/sdc",
            "VirtualName": "ephemeral1"
          },
          {
            "DeviceName": "/dev/sdd",
            "VirtualName": "ephemeral2"
          },
          {
            "DeviceName": "/dev/sde",
            "VirtualName": "ephemeral3"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "ImageId": {
          "Ref": "ImageId"
        },
        "InstanceMonitoring": "false",
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SpotPrice": {
          "Fn::If": [
            "UseSpotInstances",
            {
              "Ref": "SpotPrice"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "UserData": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "UserDataBase64a"
              },
              {
                "Ref": "UserDataBase64b"
              }
            ]
          ]
        }
      }
    },
    "RecordSetGroup": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": {
          "Ref": "HostedZoneName"
        },
        "RecordSets": [
          {
            "AliasTarget": {
              "DNSName": {
                "Fn::GetAtt": [
                  "ElasticLoadBalancer",
                  "CanonicalHostedZoneName"
                ]
              },
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "ElasticLoadBalancer",
                  "CanonicalHostedZoneNameID"
                ]
              }
            },
            "Name": {
              "Fn::Join": [
                ".",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Ref": "HostedZoneName"
                  }
                ]
              ]
            },
            "Type": "A"
          }
        ]
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "FromPort": {
              "Ref": "WebServerPort"
            },
            "IpProtocol": "tcp",
            "SourceSecurityGroupName": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.GroupName"
              ]
            },
            "SourceSecurityGroupOwnerId": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.OwnerAlias"
              ]
            },
            "ToPort": {
              "Ref": "WebServerPort"
            }
          }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["ec2.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "S3Read",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:Get*",
                    "s3:List*"],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "CloudWatch",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:*",
                    "logs:*"],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    }
  }
}

